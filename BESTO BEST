local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local MainData = LocalPlayer.MAIN_DATA
local CurrentData = MainData.Fruits:WaitForChild(MainData.Slots[MainData.Slot.Value].Value)
local FruitMoves = {} -- Initializing FruitMoves table

-- Function to respawn the player
local function RespawnPlayer()
    FruitMoves = {} -- Reset FruitMoves
    require(ReplicatedStorage.Loader).ServerEvent("Core", "LoadCharacter", {})
    require(ReplicatedStorage.Loader).ServerEvent("Main", "LoadCharacter")
    wait(3)  -- Wait before enabling core GUI
    Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character
    -- Hide the menu GUI
    StarterGui:SetCore("TopbarEnabled", false)
    StarterGui:SetCore("ResetButtonCallback", true)
    StarterGui:SetCoreGuiEnabled("Backpack", false)
    StarterGui:SetCoreGuiEnabled("PlayerList", false)
    StarterGui:SetCoreGuiEnabled("Chat", false)
    -- Removes the Menu Gui Play, Spin, Join Friend, Afk World
    game.Players.LocalPlayer.PlayerGui.UI.MainMenu.Visible = false
    -- Makes Level, Player Name, HP, Stamina, Shop, Titles, Settings, Daily Visible
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Visible = true
    task.wait()
    -- Hide player name
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Handler.Overhead.PlayerName.Visible = false
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Handler.OverheadUIS.Overhead.PlayerName.Visible = false
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Player.Visible = false
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Player.PlayerTextBehind = false
    
    -- Check if stamina is below a certain threshold and break joints if needed
    if LocalPlayer.Character then
        local stats = LocalPlayer.Character:WaitForChild('Stats', 2)
        if stats then
            local stamina = stats:GetAttribute("Stamina")
            if stamina and Percent(stamina, GetStamina()) <= getgenv().Stamina then
                LocalPlayer.Character:BreakJoints()
            end
        end
    end
end

-- Function to handle player's death
local function OnPlayerDied()
    print("Local player has died or hasn't spawned.")
    RespawnPlayer()
end

game.Players.PlayerAdded:Connect(function(player)
    if player == game.Players.LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            -- Connect to the Character's Died event
            character:WaitForChild("Humanoid").Died:Connect(function()
                OnPlayerDied()
            end)
        end)
    end
end)

-- Function to split a string by delimiters
function split(source, delimiters)
    local elements = {}
    local pattern = '([^'..delimiters..']+)'
    string.gsub(source, pattern, function(value) elements[#elements + 1] = value end)
    return elements
end

-- Main logic function
while true do
    task.spawn(RespawnPlayer)
    task.wait()

    local path = game:GetService("Players").LocalPlayer.PlayerGui.UI.HUD.Bars.ProgressStamina.Text
    local exit = split(path, "/")
    if tonumber(exit[1]) <= tonumber(exit[2]) * 0.25 then
        game.Players.LocalPlayer.Character.Humanoid.Health = 0
    else
        _G.Toggle = true
        for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            local x = string.split(v.Name, " ")
            if x[2] ~= nil then
                v.Name = x[1]..x[2]
            end
        end
        task.wait(0.1)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1276, 696, -190)
        for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            local ohString1 = game.Players.LocalPlayer["MAIN_DATA"].Slots[game.Players.LocalPlayer["MAIN_DATA"].Slot.Value].Value
            local ohString2 = v.Name
            local ohTable3 = {}
            game:GetService("ReplicatedStorage").Replicator:InvokeServer(ohString1, ohString2, ohTable3)
            print(ohString1)
        end
    end
end
