local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local MainData = LocalPlayer.MAIN_DATA
local CurrentData = MainData.Fruits:WaitForChild(MainData.Slots[MainData.Slot.Value].Value)
local FruitMoves = {} -- Initializing FruitMoves table

-- Function to respawn the player
local function RespawnPlayer()
    FruitMoves = {} -- Reset FruitMoves
    require(ReplicatedStorage.Loader).ServerEvent("Core", "LoadCharacter", {})
    require(ReplicatedStorage.Loader).ServerEvent("Main", "LoadCharacter")
    wait(3)  -- Wait before enabling core GUI
    Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character
    -- Hide the menu GUI
    StarterGui:SetCore("TopbarEnabled", false)
    StarterGui:SetCore("ResetButtonCallback", true)
    StarterGui:SetCoreGuiEnabled("Backpack", false)
    StarterGui:SetCoreGuiEnabled("PlayerList", false)
    StarterGui:SetCoreGuiEnabled("Chat", false)
    -- Removes the Menu Gui Play, Spin, Join Friend, Afk World
    game.Players.LocalPlayer.PlayerGui.UI.MainMenu.Visible = false
    -- Makes Level, Player Name, HP, Stamina, Shop, Titles, Settings, Daily Visible
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Visible = true
    task.wait()
    --idk which of this mfker is responsible for hiding Name but it works anyway
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Handler.Overhead.PlayerName.Visible = false
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Handler.OverheadUIS.Overhead.PlayerName.Visible = false
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Player.Visible = false
    game.Players.LocalPlayer.PlayerGui.UI.HUD.Player.PlayerTextBehind = false
	
	if (LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()) then
        if Percent(LocalPlayer.Character:WaitForChild('Stats',2):GetAttribute("Stamina"),GetStamina()) <= getgenv().Stamina then
			LocalPlayer.Character:BreakJoints()
        end
    end
end

-- Function to handle player's death
local function OnPlayerDied()
    print("Local player has died or hasn't spawned.")
    RespawnPlayer()
end

game.Players.PlayerAdded:Connect(function(player)
    if player == game.Players.LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            -- Connect to the Character's Died event
            character:WaitForChild("Humanoid").Died:Connect(function()
                OnPlayerDied()
            end)
        end)
    end
end)

-- Function to move player to destination
local function MovePlayerToDestination(destination)
    if LocalPlayer.Character then
        local currentPosition = LocalPlayer.Character.HumanoidRootPart.Position
        if currentPosition ~= destination then
            LocalPlayer.Character:MoveTo(destination)
            repeat
                task.wait()
                currentPosition = LocalPlayer.Character.HumanoidRootPart.Position
            until currentPosition == destination
        end
    end
end

-- Function to get destination based on PlaceId
local function GetDestination()
    if game.PlaceId == 9224601490 then 
        return Vector3.new(1195, 562, -826)
    elseif game.PlaceId == 16190471004 then
        return Vector3.new(122, 149, -1264)
    elseif game.PlaceId == 12413901502 then
        return Vector3.new(-4773, 1349, -279)
    else 
        print("PlaceId not found!")
    end
end

-- Main logic function
while true do
    task.spawn(RespawnPlayer)
    task.wait()

    -- Move player to the specified coordinates
    task.spawn(function()
        MovePlayerToDestination(GetDestination())
    end)
    local path = game.Players.LocalPlayer.PlayerGui.UI.HUD.Bars.ProgressStamina.Text
    local exit = (split(path, "/"))
    if tonumber(exit[1]) <= tonumber(exit[2])*0.25 then
		game.Players.LocalPlayer.Character.Humanoid.Health = 0
		
	else
	-- Populate FruitMoves
    FruitMoves = {}
    for i,v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.ClassName == "Tool" and CurrentData.Level.Value >= v:GetAttribute("Level") then
            FruitMoves[#FruitMoves + 1] = string.gsub(v.Name, " ", "")
        end
    end
    
    -- Use FruitMoves
    for i,v in pairs(FruitMoves) do
        if not LocalPlayer.Cooldowns:FindFirstChild(v) then
            ReplicatedStorage.Replicator:InvokeServer(CurrentData.Name, v, {})
        end
    end
	end
end
